/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace ConnectionIdentities {
  export type IdentityStruct = { prefix: string; digest: string };

  export type IdentityStructOutput = [string, string] & {
    prefix: string;
    digest: string;
  };
}

export interface ConnectionIdentitiesInterface extends utils.Interface {
  functions: {
    "addIdentity(string,string)": FunctionFragment;
    "getIdentities(address)": FunctionFragment;
    "removeIdentity(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "addIdentity" | "getIdentities" | "removeIdentity"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addIdentity",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getIdentities",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeIdentity",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIdentities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeIdentity",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ConnectionIdentities extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConnectionIdentitiesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addIdentity(
      prefix: string,
      digest: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getIdentities(
      user: string,
      overrides?: CallOverrides
    ): Promise<[ConnectionIdentities.IdentityStructOutput[]]>;

    removeIdentity(
      index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  addIdentity(
    prefix: string,
    digest: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getIdentities(
    user: string,
    overrides?: CallOverrides
  ): Promise<ConnectionIdentities.IdentityStructOutput[]>;

  removeIdentity(
    index: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    addIdentity(
      prefix: string,
      digest: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getIdentities(
      user: string,
      overrides?: CallOverrides
    ): Promise<ConnectionIdentities.IdentityStructOutput[]>;

    removeIdentity(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addIdentity(
      prefix: string,
      digest: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getIdentities(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeIdentity(
      index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addIdentity(
      prefix: string,
      digest: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getIdentities(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeIdentity(
      index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
