/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ConnectionIdentities,
  ConnectionIdentitiesInterface,
} from "../ConnectionIdentities";

const _abi = [
  {
    type: "function",
    name: "addIdentity",
    inputs: [
      {
        name: "prefix",
        type: "string",
        internalType: "string",
      },
      {
        name: "digest",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getIdentities",
    inputs: [
      {
        name: "user",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple[]",
        internalType: "struct ConnectionIdentities.Identity[]",
        components: [
          {
            name: "prefix",
            type: "string",
            internalType: "string",
          },
          {
            name: "digest",
            type: "string",
            internalType: "string",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "removeIdentity",
    inputs: [
      {
        name: "index",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "error",
    name: "InvalidIndex",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506108b18061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063331cca2114610046578063b64272101461005b578063c7baca461461006e575b600080fd5b6100596100543660046103df565b610097565b005b61005961006936600461049d565b61018d565b61008161007c366004610506565b6101f2565b60405161008e919061057c565b60405180910390f35b3360009081526020819052604090205481106100c6576040516363df817160e01b815260040160405180910390fd5b336000908152602081905260409020805481906100e590600190610608565b815481106100f5576100f561062f565b90600052602060002090600202018183815481106101155761011561062f565b600091825260209091206002909102018061013083826106ce565b50600181810190610143908401826106ce565b5090505080805480610157576101576107ae565b600082815260208120600019909201916002830201906101778282610389565b610185600183016000610389565b505090555050565b60408051808201825283815260208082018490523360009081528082529283208054600181018255908452922081519192839260029091029091019081906101d590826107c4565b50602082015160018201906101ea90826107c4565b505050505050565b6001600160a01b038116600090815260208181526040808320805482518185028101850190935280835260609492939192909184015b8282101561037e578382906000526020600020906002020160405180604001604052908160008201805461025b90610645565b80601f016020809104026020016040519081016040528092919081815260200182805461028790610645565b80156102d45780601f106102a9576101008083540402835291602001916102d4565b820191906000526020600020905b8154815290600101906020018083116102b757829003601f168201915b505050505081526020016001820180546102ed90610645565b80601f016020809104026020016040519081016040528092919081815260200182805461031990610645565b80156103665780601f1061033b57610100808354040283529160200191610366565b820191906000526020600020905b81548152906001019060200180831161034957829003601f168201915b50505050508152505081526020019060010190610228565b505050509050919050565b50805461039590610645565b6000825580601f106103a5575050565b601f0160209004906000526020600020908101906103c391906103c6565b50565b5b808211156103db57600081556001016103c7565b5090565b6000602082840312156103f157600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261041f57600080fd5b813567ffffffffffffffff811115610439576104396103f8565b604051601f8201601f19908116603f0116810167ffffffffffffffff81118282101715610468576104686103f8565b60405281815283820160200185101561048057600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156104b057600080fd5b823567ffffffffffffffff8111156104c757600080fd5b6104d38582860161040e565b925050602083013567ffffffffffffffff8111156104f057600080fd5b6104fc8582860161040e565b9150509250929050565b60006020828403121561051857600080fd5b81356001600160a01b038116811461052f57600080fd5b9392505050565b6000815180845260005b8181101561055c57602081850181015186830182015201610540565b506000602082860101526020601f19601f83011685010191505092915050565b6000602082016020835280845180835260408501915060408160051b86010192506020860160005b828110156105fc57603f1987860301845281518051604087526105ca6040880182610536565b90506020820151915086810360208801526105e58183610536565b9650505060209384019391909101906001016105a4565b50929695505050505050565b8181038181111561062957634e487b7160e01b600052601160045260246000fd5b92915050565b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061065957607f821691505b60208210810361067957634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156106c957806000526020600020601f840160051c810160208510156106a65750805b601f840160051c820191505b818110156106c657600081556001016106b2565b50505b505050565b8181036106d9575050565b6106e38254610645565b67ffffffffffffffff8111156106fb576106fb6103f8565b61070f816107098454610645565b8461067f565b6000601f821160018114610746576000831561072b5750848201545b600184901b600019600386901b1c198216175b8555506106c6565b600085815260209020601f19841690600086815260209020845b838110156107805782860154825560019586019590910190602001610760565b508583101561079e5781850154600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603160045260246000fd5b815167ffffffffffffffff8111156107de576107de6103f8565b6107ec816107098454610645565b6020601f82116001811461081e576000831561072b575081850151600184901b600019600386901b1c1982161761073e565b600084815260208120601f198516915b8281101561084e578785015182556020948501946001909201910161082e565b508482101561086c5786840151600019600387901b60f8161c191681555b50505050600190811b0190555056fea2646970667358221220aa6a79281a624e3f504e1e93aad10d09d95a652c77e3935ee5acd294f956aecd64736f6c634300081a0033";

type ConnectionIdentitiesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConnectionIdentitiesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConnectionIdentities__factory extends ContractFactory {
  constructor(...args: ConnectionIdentitiesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<ConnectionIdentities> {
    return super.deploy(overrides || {}) as Promise<ConnectionIdentities>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ConnectionIdentities {
    return super.attach(address) as ConnectionIdentities;
  }
  override connect(signer: Signer): ConnectionIdentities__factory {
    return super.connect(signer) as ConnectionIdentities__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConnectionIdentitiesInterface {
    return new utils.Interface(_abi) as ConnectionIdentitiesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConnectionIdentities {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ConnectionIdentities;
  }
}
